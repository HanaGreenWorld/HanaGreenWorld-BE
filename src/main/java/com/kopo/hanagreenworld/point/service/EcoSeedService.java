package com.kopo.hanagreenworld.point.service;

import com.kopo.hanagreenworld.common.util.SecurityUtil;
import lombok.extern.slf4j.Slf4j;
import com.kopo.hanagreenworld.member.domain.Member;
import com.kopo.hanagreenworld.member.domain.MemberProfile;
import com.kopo.hanagreenworld.member.repository.MemberProfileRepository;
import com.kopo.hanagreenworld.member.repository.MemberRepository;
import com.kopo.hanagreenworld.point.domain.PointCategory;
import com.kopo.hanagreenworld.point.domain.PointTransaction;
import com.kopo.hanagreenworld.point.domain.PointTransactionType;
import com.kopo.hanagreenworld.point.dto.EcoSeedConvertRequest;
import com.kopo.hanagreenworld.point.dto.EcoSeedEarnRequest;
import com.kopo.hanagreenworld.point.dto.EcoSeedResponse;
import com.kopo.hanagreenworld.point.dto.EcoSeedTransactionResponse;
import com.kopo.hanagreenworld.point.repository.PointTransactionRepository;
import com.kopo.hanagreenworld.common.exception.BusinessException;
import com.kopo.hanagreenworld.common.exception.ErrorCode;
import com.kopo.hanagreenworld.integration.service.HanamoneyCardService;
import com.kopo.hanagreenworld.integration.service.GroupIntegrationTokenService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;
import java.util.Map;
import java.util.HashMap;

@Service
@RequiredArgsConstructor
@Transactional
@Slf4j
public class EcoSeedService {

    private final PointTransactionRepository pointTransactionRepository;
    private final MemberProfileRepository memberProfileRepository;
    private final MemberRepository memberRepository;
    private final HanamoneyCardService hanamoneyCardService;
    private final GroupIntegrationTokenService groupIntegrationTokenService;
    private final RestTemplate restTemplate;

    @Value("${integration.card.url}")
    private String hanacardApiBaseUrl;

    /**
     * ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò ÏõêÌÅêÏî®Ïïó Ï†ïÎ≥¥ Ï°∞Ìöå
     */
    @Transactional
    public EcoSeedResponse getEcoSeedInfo() {
        Long memberId = SecurityUtil.getCurrentMemberId();
        log.info("üîç EcoSeedService.getEcoSeedInfo() - memberId: {}", memberId);
        
        if (memberId == null) {
            log.error("‚ùå memberIdÍ∞Ä nullÏûÖÎãàÎã§! Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
            throw new BusinessException(ErrorCode.UNAUTHORIZED);
        }
        
        MemberProfile profile = getOrCreateMemberProfile(memberId);
        
        // Í±∞Îûò ÎÇ¥Ïó≠ÏóêÏÑú Ìï©Í≥Ñ Í≥ÑÏÇ∞
        Long totalEarned = pointTransactionRepository.sumEarnedPointsByMemberId(memberId);
        Long totalUsed = pointTransactionRepository.sumUsedPointsByMemberId(memberId);
        Long totalConverted = pointTransactionRepository.sumConvertedPointsByMemberId(memberId);
        
        // totalUsedÏôÄ totalConvertedÎäî ÏùåÏàòÎ°ú Ï†ÄÏû•ÎêòÏñ¥ ÏûàÏúºÎØÄÎ°ú Ï†àÎåìÍ∞íÏùÑ ÏÇ¨Ïö©
        Long actualTotalUsed = Math.abs(totalUsed) + Math.abs(totalConverted);
        
        return EcoSeedResponse.builder()
                .totalSeeds(totalEarned)
                .currentSeeds(profile.getCurrentPoints())
                .usedSeeds(actualTotalUsed)
                .convertedSeeds(Math.abs(totalConverted))
                .message("ÏõêÌÅêÏî®Ïïó Ï†ïÎ≥¥ Ï°∞Ìöå ÏôÑÎ£å")
                .build();
    }

    /**
     * ÏõêÌÅêÏî®Ïïó Ï†ÅÎ¶Ω (Ìä∏ÎûúÏû≠ÏÖòÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ïÌï©ÏÑ± Î≥¥Ïû•)
     */
    @Transactional
    public EcoSeedResponse earnEcoSeeds(EcoSeedEarnRequest request) {
        Long memberId = SecurityUtil.getCurrentMemberId();
        if (memberId == null) {
            throw new BusinessException(ErrorCode.UNAUTHORIZED);
        }
        Member member = memberRepository.findById(memberId)
                .orElseThrow(() -> new BusinessException(ErrorCode.MEMBER_NOT_FOUND));
        
        MemberProfile profile = getOrCreateMemberProfile(memberId);
        
        try {
            // ÏõêÌÅêÏî®Ïïó Ï†ÅÎ¶Ω (ÌòÑÏû¨ Î≥¥Ïú†ÎüâÎßå ÏóÖÎç∞Ïù¥Ìä∏)
            profile.updateCurrentPoints(request.getPointsAmount().longValue());
            
            // Í±∞Îûò ÎÇ¥Ïó≠ ÏÉùÏÑ±
            PointTransaction transaction = PointTransaction.builder()
                    .member(member)
                    .pointTransactionType(PointTransactionType.EARN)
                    .category(request.getCategory())
                    .description(request.getDescription() != null ? request.getDescription() : 
                               request.getCategory().getDisplayName() + "Î°ú ÏõêÌÅêÏî®Ïïó Ï†ÅÎ¶Ω")
                    .pointsAmount(request.getPointsAmount())
                    .balanceAfter(profile.getCurrentPoints())
                    .build();
            
            // Ìïú Ìä∏ÎûúÏû≠ÏÖòÏúºÎ°ú Ï≤òÎ¶¨
            memberProfileRepository.save(profile);
            pointTransactionRepository.save(transaction);
            
            log.info("ÏõêÌÅêÏî®Ïïó Ï†ÅÎ¶Ω ÏôÑÎ£å: {} - {}Í∞ú", memberId, request.getPointsAmount());
            
            return getEcoSeedInfo();
        } catch (Exception e) {
            log.error("ÏõêÌÅêÏî®Ïïó Ï†ÅÎ¶Ω Ïã§Ìå®: {} - {}", memberId, e.getMessage());
            throw new BusinessException(ErrorCode.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * ÏõêÌÅêÏî®ÏïóÏùÑ ÌïòÎÇòÎ®∏ÎãàÎ°ú Ï†ÑÌôò (Ìä∏ÎûúÏû≠ÏÖòÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ïÌï©ÏÑ± Î≥¥Ïû•)
     */
    @Transactional
    public EcoSeedResponse convertToHanaMoney(EcoSeedConvertRequest request) {
        Long memberId = SecurityUtil.getCurrentMemberId();
        if (memberId == null) {
            throw new BusinessException(ErrorCode.UNAUTHORIZED);
        }
        Member member = memberRepository.findById(memberId)
                .orElseThrow(() -> new BusinessException(ErrorCode.MEMBER_NOT_FOUND));
        
        MemberProfile profile = getOrCreateMemberProfile(memberId);
        
        // ÏûîÏï° ÌôïÏù∏
        if (profile.getCurrentPoints() < request.getPointsAmount()) {
            throw new BusinessException(ErrorCode.INSUFFICIENT_ECO_SEEDS);
        }
        
        try {
            // Ï†ÑÌôò Ï†Ñ ÏûîÏï° Î°úÍπÖ
            Long beforeEcoSeeds = profile.getCurrentPoints();
            
            log.info("ÌïòÎÇòÎ®∏Îãà Ï†ÑÌôò ÏãúÏûë: ÌöåÏõêID={}, Ï†ÑÌôòÍ∏àÏï°={}, Ï†ÑÌôòÏ†Ñ ÏõêÌÅêÏî®Ïïó={}", 
                    memberId, request.getPointsAmount(), beforeEcoSeeds);
            
            // 1. Î®ºÏ†Ä ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤ÑÏóêÏÑú ÌïòÎÇòÎ®∏Îãà Ï†ÅÎ¶Ω ÏãúÎèÑ
            boolean hanamoneyEarnSuccess = hanamoneyCardService.earnHanamoney(
                    member, 
                    request.getPointsAmount().longValue(), 
                    "ÏõêÌÅêÏî®Ïïó Ï†ÑÌôò: " + request.getPointsAmount() + "Í∞ú"
            );
            
            if (!hanamoneyEarnSuccess) {
                log.error("ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤ÑÏóêÏÑú ÌïòÎÇòÎ®∏Îãà Ï†ÅÎ¶Ω Ïã§Ìå® - ÌöåÏõêID: {}, Í∏àÏï°: {}", 
                        memberId, request.getPointsAmount());
                throw new BusinessException(ErrorCode.INTERNAL_SERVER_ERROR);
            }
            
            // 2. ÌïòÎÇòÎ®∏Îãà Ï†ÅÎ¶ΩÏù¥ ÏÑ±Í≥µÌñàÏúºÎ©¥ ÏõêÌÅêÏî®Ïïó Ï∞®Í∞ê
            profile.updateCurrentPoints(-request.getPointsAmount().longValue());
            
            // 3. Í±∞Îûò ÎÇ¥Ïó≠ ÏÉùÏÑ± (CONVERT ÌÉÄÏûÖ ÏÇ¨Ïö©, ÏùåÏàòÎ°ú Ï†ÄÏû•)
            PointTransaction transaction = PointTransaction.builder()
                    .member(member)
                    .pointTransactionType(PointTransactionType.CONVERT)
                    .category(PointCategory.HANA_MONEY_CONVERSION)
                    .description("ÌïòÎÇòÎ®∏ÎãàÎ°ú Ï†ÑÌôò: " + request.getPointsAmount() + "Í∞ú")
                    .pointsAmount(-request.getPointsAmount()) // ÏùåÏàòÎ°ú Ï†ÄÏû•
                    .balanceAfter(profile.getCurrentPoints())
                    .build();
            
            // 4. ÏõêÌÅêÏî®Ïïó Ï∞®Í∞êÍ≥º Í±∞Îûò ÎÇ¥Ïó≠ Ï†ÄÏû•
            memberProfileRepository.save(profile);
            pointTransactionRepository.save(transaction);
            
            // Ï†ÑÌôò ÌõÑ ÏûîÏï° Î°úÍπÖ
            Long afterEcoSeeds = profile.getCurrentPoints();
            
            log.info("ÌïòÎÇòÎ®∏Îãà Ï†ÑÌôò ÏôÑÎ£å: ÌöåÏõêID={}, Ï†ÑÌôòÍ∏àÏï°={}, Ï†ÑÌôòÌõÑ ÏõêÌÅêÏî®Ïïó={}", 
                    memberId, request.getPointsAmount(), afterEcoSeeds);
            
            // Í≤ÄÏ¶ù: ÏõêÌÅêÏî®Ïïó Ï∞®Í∞êÏù¥ Ï†ïÌôïÌûà Ïù¥Î£®Ïñ¥Ï°åÎäîÏßÄ ÌôïÏù∏
            if ((beforeEcoSeeds - afterEcoSeeds) != request.getPointsAmount().longValue()) {
                log.error("ÏõêÌÅêÏî®Ïïó Ï∞®Í∞ê Ïò§Î•ò: ÏòàÏÉÅ={}, Ïã§Ï†ú={}", request.getPointsAmount(), (beforeEcoSeeds - afterEcoSeeds));
                throw new BusinessException(ErrorCode.INTERNAL_SERVER_ERROR);
            }
            
            return getEcoSeedInfo();
        } catch (Exception e) {
            log.error("ÌïòÎÇòÎ®∏Îãà Ï†ÑÌôò Ïã§Ìå®: {} - {}", memberId, e.getMessage(), e);
            throw new BusinessException(ErrorCode.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * ÏõêÌÅêÏî®Ïïó Í±∞Îûò ÎÇ¥Ïó≠ Ï°∞Ìöå
     */
    @Transactional(readOnly = true)
    public Page<EcoSeedTransactionResponse> getTransactionHistory(Pageable pageable) {
        Long memberId = SecurityUtil.getCurrentMemberId();
        if (memberId == null) {
            throw new BusinessException(ErrorCode.UNAUTHORIZED);
        }
        
        Page<PointTransaction> transactions = pointTransactionRepository
                .findByMember_MemberIdOrderByOccurredAtDesc(memberId, pageable);
        
        return transactions.map(EcoSeedTransactionResponse::from);
    }

    /**
     * ÌäπÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨ Í±∞Îûò ÎÇ¥Ïó≠ Ï°∞Ìöå
     */
    @Transactional(readOnly = true)
    public List<EcoSeedTransactionResponse> getTransactionHistoryByCategory(PointCategory category) {
        Long memberId = SecurityUtil.getCurrentMemberId();
        if (memberId == null) {
            throw new BusinessException(ErrorCode.UNAUTHORIZED);
        }
        
        List<PointTransaction> transactions = pointTransactionRepository
                .findByMember_MemberIdAndCategoryOrderByOccurredAtDesc(memberId, category.name());
        
        return transactions.stream()
                .map(EcoSeedTransactionResponse::from)
                .collect(Collectors.toList());
    }

    /**
     * ÌöåÏõê ÌîÑÎ°úÌïÑ ÏÉùÏÑ± ÎòêÎäî Ï°∞Ìöå
     */
    private MemberProfile getOrCreateMemberProfile(Long memberId) {
        log.info("üîç getOrCreateMemberProfile Ìò∏Ï∂ú - memberId: {}", memberId);
        
        if (memberId == null) {
            log.error("‚ùå memberIdÍ∞Ä nullÏûÖÎãàÎã§!");
            throw new BusinessException(ErrorCode.UNAUTHORIZED);
        }
        
        return memberProfileRepository.findByMember_MemberId(memberId)
                .orElseGet(() -> {
                    log.info("üîç MemberProfileÏù¥ ÏóÜÏùå - ÏÉàÎ°ú ÏÉùÏÑ± ÏãúÏûë");
                    Member member = memberRepository.findById(memberId)
                            .orElseThrow(() -> {
                                log.error("‚ùå MemberÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§ - memberId: {}", memberId);
                                return new BusinessException(ErrorCode.MEMBER_NOT_FOUND);
                            });
                    
                    MemberProfile profile = MemberProfile.builder()
                            .member(member)
                            .nickname(member.getName())
                            .build();
                    
                    return memberProfileRepository.save(profile);
                });
    }

    /**
     * ÌöåÏõê ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Ï°∞Ìöå (Ïã§ÏãúÍ∞Ñ Í≥ÑÏÇ∞)
     */
    @Transactional
    public Map<String, Object> getMemberProfile() {
        Long memberId = SecurityUtil.getCurrentMemberId();
        if (memberId == null) {
            throw new BusinessException(ErrorCode.UNAUTHORIZED);
        }
        MemberProfile profile = getOrCreateMemberProfile(memberId);
        
        // point_transactionsÏóêÏÑú Ïã§ÏãúÍ∞Ñ Í≥ÑÏÇ∞
        Long totalEarned = pointTransactionRepository.sumEarnedPointsByMemberId(memberId);
        Long currentMonthPoints = pointTransactionRepository.sumCurrentMonthEarnedPointsByMemberId(memberId);
        
        Map<String, Object> response = new HashMap<>();
        response.put("currentPoints", profile.getCurrentPoints());
        response.put("totalPoints", totalEarned); // Ïã§ÏãúÍ∞Ñ Í≥ÑÏÇ∞Îêú Ï¥ù Ï†ÅÎ¶Ω
        response.put("currentMonthPoints", currentMonthPoints); // Ïã§ÏãúÍ∞Ñ Í≥ÑÏÇ∞Îêú Ïù¥Î≤à Îã¨ Ï†ÅÎ¶Ω
        
        // ÌïòÎÇòÎ®∏Îãà Ï†ïÎ≥¥Îäî ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤ÑÏóêÏÑú Ï°∞Ìöå
        try {
            Long hanaMoneyBalance = getHanaMoneyFromCardServer(memberId);
            response.put("hanaMoney", hanaMoneyBalance);
        } catch (Exception e) {
            log.warn("ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤ÑÏóêÏÑú ÌïòÎÇòÎ®∏Îãà Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®: {}", e.getMessage());
            response.put("hanaMoney", 0L);
        }
        
        return response;
    }

    /**
     * ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤ÑÏóêÏÑú ÌïòÎÇòÎ®∏Îãà ÏûîÏï° Ï°∞Ìöå
     */
    private Long getHanaMoneyFromCardServer(Long memberId) {
        try {
            // Member Ï†ïÎ≥¥ Ï°∞Ìöå
            Member member = memberRepository.findById(memberId)
                    .orElseThrow(() -> new BusinessException(ErrorCode.MEMBER_NOT_FOUND));
            
            // ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤Ñ API Ìò∏Ï∂úÏùÑ ÏúÑÌïú ÌÜ†ÌÅ∞ ÏÉùÏÑ±
            String groupCustomerToken = groupIntegrationTokenService.getGroupTokenByPhone(member.getPhoneNumber())
                    .orElseGet(() -> groupIntegrationTokenService.createGroupCustomerToken(
                            "CI_" + member.getPhoneNumber().replace("-", "") + "_" + member.getName().hashCode(),
                            member.getName(),
                            member.getPhoneNumber(),
                            member.getEmail(),
                            "19900315" // Placeholder
                    ));
            String customerInfoToken = groupIntegrationTokenService.generateCustomerInfoToken(groupCustomerToken);
            String internalServiceToken = groupIntegrationTokenService.generateInternalServiceToken();
            
            // ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤Ñ API Ìò∏Ï∂ú
            String url = hanacardApiBaseUrl + "/api/integration/hanamoney-info";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("X-Internal-Service", internalServiceToken);
            
            Map<String, String> requestBody = Map.of(
                    "customerInfoToken", customerInfoToken,
                    "requestingService", "GREEN_WORLD",
                    "consentToken", "CONSENT_" + memberId,
                    "memberId", memberId.toString()
            );
            
            HttpEntity<Map<String, String>> entity = new HttpEntity<>(requestBody, headers);
            
            log.info("ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤Ñ ÌïòÎÇòÎ®∏Îãà Ï°∞Ìöå ÏöîÏ≤≠ - URL: {}, ÌöåÏõêID: {}", url, memberId);
            
            ResponseEntity<Map> response = restTemplate.exchange(url, HttpMethod.POST, entity, Map.class);
            
            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                Map<String, Object> responseBody = response.getBody();
                Map<String, Object> data = (Map<String, Object>) responseBody.get("data");
                Long balance = Long.valueOf(data.get("currentPoints").toString());
                log.info("ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤ÑÏóêÏÑú ÌïòÎÇòÎ®∏Îãà Ï°∞Ìöå ÏÑ±Í≥µ - ÏûîÏï°: {}", balance);
                return balance;
            } else {
                log.warn("ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤Ñ ÏùëÎãµ Ïò§Î•ò - Status: {}", response.getStatusCode());
                return 0L;
            }
            
        } catch (Exception e) {
            log.error("ÌïòÎÇòÏπ¥Îìú ÏÑúÎ≤Ñ ÌïòÎÇòÎ®∏Îãà Ï°∞Ìöå Ïã§Ìå® - ÌöåÏõêID: {}, ÏóêÎü¨: {}", memberId, e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï°∞Ìöå (Î†àÎ≤®, ÌÉÑÏÜå Ï†àÏïΩÎüâ Îì±)
     */
    @Transactional
    public Map<String, Object> getUserStats() {
        Long memberId = SecurityUtil.getCurrentMemberId();
        if (memberId == null) {
            throw new BusinessException(ErrorCode.UNAUTHORIZED);
        }
        MemberProfile profile = getOrCreateMemberProfile(memberId);
        
        // point_transactionsÏóêÏÑú Ïã§ÏãúÍ∞Ñ Í≥ÑÏÇ∞
        Long totalEarned = pointTransactionRepository.sumEarnedPointsByMemberId(memberId);
        Long currentMonthPoints = pointTransactionRepository.sumCurrentMonthEarnedPointsByMemberId(memberId);
        
        // ÌòÑÏû¨ Î†àÎ≤® Í≥ÑÏÇ∞ (Ìè¨Ïù∏Ìä∏Ïóê Îî∞Îùº ÎèôÏ†ÅÏúºÎ°ú Í≥ÑÏÇ∞)
        long currentPoints = totalEarned != null ? totalEarned : 0L;
        MemberProfile.EcoLevel currentLevel = calculateCurrentLevel(currentPoints);
        MemberProfile.EcoLevel nextLevel = getNextLevel(currentLevel);
        
        // Îã§Ïùå Î†àÎ≤®ÍπåÏßÄÏùò ÏßÑÌñâÎèÑ Í≥ÑÏÇ∞
        double progressToNextLevel = 0.0;
        if (nextLevel != null) {
            long currentLevelMin = currentLevel.getMinPoints();
            long nextLevelMin = nextLevel.getMinPoints();
            long totalRange = nextLevelMin - currentLevelMin;
            if (totalRange > 0) {
                long userProgress = currentPoints - currentLevelMin;
                progressToNextLevel = Math.min(1.0, Math.max(0.0, (double) userProgress / totalRange));
            }
        }
        
        Map<String, Object> response = new HashMap<>();
        response.put("totalPoints", totalEarned != null ? totalEarned : 0L);
        response.put("totalCarbonSaved", profile.getTotalCarbonSaved() != null ? profile.getTotalCarbonSaved() : 0.0);
        response.put("totalActivities", profile.getTotalActivitiesCount() != null ? profile.getTotalActivitiesCount() : 0);
        response.put("monthlyPoints", currentMonthPoints != null ? currentMonthPoints : 0L);
        response.put("monthlyCarbonSaved", profile.getCurrentMonthCarbonSaved() != null ? profile.getCurrentMonthCarbonSaved() : 0.0);
        response.put("monthlyActivities", profile.getCurrentMonthActivitiesCount() != null ? profile.getCurrentMonthActivitiesCount() : 0);
        
        // ÌòÑÏû¨ Î†àÎ≤® Ï†ïÎ≥¥
        Map<String, Object> currentLevelInfo = new HashMap<>();
        currentLevelInfo.put("id", currentLevel.name().toLowerCase());
        currentLevelInfo.put("name", currentLevel.getDisplayName());
        currentLevelInfo.put("description", getLevelDescription(currentLevel));
        currentLevelInfo.put("requiredPoints", currentLevel.getRequiredPoints());
        currentLevelInfo.put("icon", getLevelIcon(currentLevel));
        currentLevelInfo.put("color", getLevelColor(currentLevel));
        response.put("currentLevel", currentLevelInfo);
        
        // Îã§Ïùå Î†àÎ≤® Ï†ïÎ≥¥
        if (nextLevel != null) {
            Map<String, Object> nextLevelInfo = new HashMap<>();
            nextLevelInfo.put("id", nextLevel.name().toLowerCase());
            nextLevelInfo.put("name", nextLevel.getDisplayName());
            nextLevelInfo.put("description", getLevelDescription(nextLevel));
            nextLevelInfo.put("requiredPoints", nextLevel.getRequiredPoints());
            nextLevelInfo.put("icon", getLevelIcon(nextLevel));
            nextLevelInfo.put("color", getLevelColor(nextLevel));
            response.put("nextLevel", nextLevelInfo);
        } else {
            // ÏµúÍ≥† Î†àÎ≤®Ïù∏ Í≤ΩÏö∞
            Map<String, Object> nextLevelInfo = new HashMap<>();
            nextLevelInfo.put("id", currentLevel.name().toLowerCase());
            nextLevelInfo.put("name", currentLevel.getDisplayName());
            nextLevelInfo.put("description", "ÏµúÍ≥† Î†àÎ≤®Ïóê ÎèÑÎã¨ÌñàÏäµÎãàÎã§! üåü");
            nextLevelInfo.put("requiredPoints", currentLevel.getRequiredPoints());
            nextLevelInfo.put("icon", getLevelIcon(currentLevel));
            nextLevelInfo.put("color", getLevelColor(currentLevel));
            response.put("nextLevel", nextLevelInfo);
        }
        
        response.put("progressToNextLevel", progressToNextLevel);
        response.put("pointsToNextLevel", nextLevel != null ? Math.max(0, nextLevel.getMinPoints() - currentPoints) : 0L);
        
        return response;
    }
    
    /**
     * Ìè¨Ïù∏Ìä∏Ïóê Îî∞Î•∏ ÌòÑÏû¨ Î†àÎ≤® Í≥ÑÏÇ∞
     */
    private MemberProfile.EcoLevel calculateCurrentLevel(long points) {
        if (points >= MemberProfile.EcoLevel.EXPERT.getMinPoints()) {
            return MemberProfile.EcoLevel.EXPERT;
        } else if (points >= MemberProfile.EcoLevel.INTERMEDIATE.getMinPoints()) {
            return MemberProfile.EcoLevel.INTERMEDIATE;
        } else {
            return MemberProfile.EcoLevel.BEGINNER;
        }
    }
    
    /**
     * Îã§Ïùå Î†àÎ≤® Í≥ÑÏÇ∞
     */
    private MemberProfile.EcoLevel getNextLevel(MemberProfile.EcoLevel currentLevel) {
        switch (currentLevel) {
            case BEGINNER:
                return MemberProfile.EcoLevel.INTERMEDIATE;
            case INTERMEDIATE:
                return MemberProfile.EcoLevel.EXPERT;
            case EXPERT:
                return null; // ÏµúÍ≥† Î†àÎ≤®
            default:
                return MemberProfile.EcoLevel.INTERMEDIATE;
        }
    }
    
    /**
     * Î†àÎ≤®Î≥Ñ ÏÑ§Î™Ö Î∞òÌôò
     */
    private String getLevelDescription(MemberProfile.EcoLevel level) {
        switch (level) {
            case BEGINNER:
                return "üå± ÌôòÍ≤Ω Î≥¥Ìò∏ Ïó¨Ï†ïÏùÑ ÏãúÏûëÌñàÏñ¥Ïöî!";
            case INTERMEDIATE:
                return "üåø ÌôòÍ≤Ω Î≥¥Ìò∏Î•º Ïã§Ï≤úÌïòÍ≥† ÏûàÏñ¥Ïöî!";
            case EXPERT:
                return "üå≥ ÌôòÍ≤Ω Î≥¥Ìò∏Ïùò Ï†ÑÎ¨∏Í∞ÄÍ∞Ä ÎêòÏóàÏñ¥Ïöî!";
            default:
                return "üå± ÌôòÍ≤Ω Î≥¥Ìò∏ Ïó¨Ï†ïÏùÑ ÏãúÏûëÌñàÏñ¥Ïöî!";
        }
    }
    
    /**
     * Î†àÎ≤®Î≥Ñ ÏïÑÏù¥ÏΩò Î∞òÌôò
     */
    private String getLevelIcon(MemberProfile.EcoLevel level) {
        switch (level) {
            case BEGINNER:
                return "üå±";
            case INTERMEDIATE:
                return "üåø";
            case EXPERT:
                return "üå≥";
            default:
                return "üå±";
        }
    }
    
    /**
     * Î†àÎ≤®Î≥Ñ ÏÉâÏÉÅ Î∞òÌôò
     */
    private String getLevelColor(MemberProfile.EcoLevel level) {
        switch (level) {
            case BEGINNER:
                return "#10B981";
            case INTERMEDIATE:
                return "#059669";
            case EXPERT:
                return "#047857";
            default:
                return "#10B981";
        }
    }
}